Project Overview: SRE AMEYA

SRE AMEYA is a cutting-edge initiative aimed at revolutionizing the way Site Reliability Engineering (SRE) progress is communicated and showcased to senior management. The Sanskrit name "AMEYA" encapsulates the essence of boundless progress and continuous improvement, perfectly aligning with the core principles of SRE.

Key Features:

Unified Insights: SRE AMEYA acts as a centralized platform, weaving together diverse aspects of SRE operations to provide unified insights.

Visual Connectivity: The project leverages visual representations, connecting the dots of SRE excellence, allowing senior management to grasp the intricate progress effortlessly.

Real-time Analytics: With real-time analytics, SRE AMEYA ensures that senior management receives up-to-the-minute data on the team's performance, system reliability, and continuous improvement metrics.

Holistic Overview: The platform offers a holistic overview of the team's achievements, challenges, and ongoing projects, fostering transparency and informed decision-making.

Strategic Communication: SRE AMEYA serves as a strategic communication tool, translating technical details into a language that resonates with senior management, promoting a shared understanding of SRE accomplishments.

Scalable Growth: The project is designed to adapt and scale alongside the evolving landscape of SRE practices, ensuring it remains a reliable companion in the journey towards operational excellence.

SRE AMEYA stands as a testament to the commitment to excellence in Site Reliability Engineering, offering a bridge that seamlessly connects the technical intricacies of SRE with the strategic vision of senior management.



Project Overview: ACE AMEYA (Azure Cloud Enablement - Advancing Mastery for Enhanced Yield and Agility)

Introduction:
ACE AMEYA is a cutting-edge project designed to propel organizations into the forefront of digital transformation by leveraging the power of Azure Cloud. With a focus on enabling mastery in cloud technologies, this project aims to enhance operational yield, promote agility, and ensure excellence in Azure Cloud Enablement (ACE).

Key Objectives:

Azure Mastery: Foster a deep understanding and mastery of Azure cloud technologies among the team, ensuring proficient utilization of Azure services for optimal performance.

Operational Excellence: Establish and maintain a framework for operational excellence within the SRE (Site Reliability Engineering) domain, promoting robust and reliable cloud-based systems.

Advanced Insights: Develop comprehensive reporting mechanisms to provide senior management with insightful metrics and progress updates, highlighting the impact of Azure Cloud Enablement on overall organizational success.

Collaborative Connectivity: Facilitate seamless collaboration among team members and departments, creating a cohesive environment for sharing knowledge and collectively advancing towards SRE excellence.

Key Features:

Progress Visualization: Utilize innovative tools and dashboards to visually represent the progress of Azure Cloud Enablement initiatives, offering a clear and intuitive overview for senior management.

Skill Advancement Programs: Implement tailored training programs to continually enhance the skill set of the team, ensuring they stay abreast of the latest Azure technologies and best practices.

Proactive Issue Resolution: Employ proactive monitoring and incident response strategies to minimize downtime and swiftly address potential challenges, promoting a resilient and reliable cloud infrastructure.

Strategic Decision Support: Provide senior management with strategic insights and data-driven recommendations, empowering them to make informed decisions that align with organizational goals.

Conclusion:
ACE AMEYA is not just a project; it's a journey towards excellence in Azure Cloud Enablement. By fostering mastery, operational excellence, and advanced insights, the project aims to position the organization as a leader in leveraging Azure cloud technologies for unparalleled success in the digital landscape.



import { renderHook, act } from '@testing-library/react-hooks';
import { useEffect } from 'react';
import useAdfs from './useAdfs';

jest.useFakeTimers();

describe('useAdfs', () => {
  it('should call refresh function at specified interval', () => {
    const mockFetch = jest.fn();
    global.fetch = mockFetch;

    renderHook(() => useAdfs());
    jest.advanceTimersByTime(60 * 60 * 1000); // Advance timer by 1 hour

    expect(mockFetch).toHaveBeenCalledWith('/api/adfs/refresh', {
      mode: 'no-cors',
      credentials: 'include',
    });
  });

  it('should log error if refresh fails', () => {
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();

    const mockFetch = jest.fn().mockRejectedValue(new Error('Fetch error'));
    global.fetch = mockFetch;

    renderHook(() => useAdfs());
    jest.advanceTimersByTime(60 * 60 * 1000); // Advance timer by 1 hour

    expect(consoleSpy).toHaveBeenCalledWith('error while refreshing page : Fetch error');

    consoleSpy.mockRestore();
  });

  it('should clear interval on unmount', () => {
    const clearIntervalSpy = jest.spyOn(window, 'clearInterval');

    const { unmount } = renderHook(() => useAdfs());
    unmount();

    expect(clearIntervalSpy).toHaveBeenCalled();

    clearIntervalSpy.mockRestore();
  });
});
